import datetime

from aiogram import F, Router
from aiogram.enums import ParseMode
from aiogram.filters import (IS_MEMBER, IS_NOT_MEMBER, ChatMemberUpdatedFilter,
                             Command)
from aiogram.fsm.context import FSMContext
from aiogram.types import (CallbackQuery, LabeledPrice, Message,
                           PreCheckoutQuery, ReplyKeyboardRemove)

from keyboards import markup

from database.mongo import (fetch_tasks, count_user_tasks, create_task, mark_task_completed,
                            delete_task_by_index, delete_all_tasks)

from utils import is_admin, PaymentForm, TaskForm, check_and_notify_fsm_state, check_and_notify_registration


router_1 = Router()
router_2 = Router()


@router_1.message(Command('start'))
async def start(message: Message, state: FSMContext, user_repo):
    if not await check_and_notify_fsm_state(message, state):
        return

    if await user_repo.is_user_in_database(telegram_id=message.from_user.id):
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!", reply_markup=markup.get_menu(message.from_user.id))
    else:
        await user_repo.create_user(user_id=message.from_user.id,
                              first_name=message.from_user.first_name,
                              username=message.from_user.username,
                              last_name=message.from_user.last_name,
                              is_vip=True if is_admin(message.from_user.id) else False)
        await message.answer("üëã –ü—Ä–∏–≤–µ—Ç, –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å, —É–¥–∞—á–∏ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏!",
                              reply_markup=markup.get_menu(message.from_user.id))

@router_1.message(F.text.in_(['/profile']))
async def profile(message: Message, state: FSMContext, user_repo):
    if not await check_and_notify_registration(message, user_repo):
        return

    if not await check_and_notify_fsm_state(message, state):
        return

    profile_data = await user_repo.get_user_profile(user_id=message.from_user.id)

    await message.answer("<b>–¢–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–æ–≥–∏–Ω–∞ –Ω–∞ —Å–∞–π—Ç–µ:</b>\n\n"
                        f"üë®‚Äçüíª –õ–æ–≥–∏–Ω: <code>{profile_data[0]}</code>\n"
                        f"üîë –ü–∞—Ä–æ–ª—å: <code>{profile_data[1]}</code>\n",
                        parse_mode=ParseMode.HTML, reply_markup=markup.get_menu(message.from_user.id))
    
@router_1.message(Command('statistic'))
async def get_user_statss(message: Message, state: FSMContext, user_repo, stats_repo):
    if not await check_and_notify_registration(message, user_repo):
        return

    if not await check_and_notify_fsm_state(message, state):
        return
    
    user_stat = await stats_repo.get_user_stats(user_id=message.from_user.id)

    if user_stat is None:
        await message.answer(
        "üòî <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.</b>\n\n"
        "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã <b>/add_task</b> üí™",
        reply_markup=markup.get_menu(message.from_user.id), parse_mode=ParseMode.HTML)
    else:
        await message.answer(
        f"<b>üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        f"üìù <b>–í—Å–µ–≥–æ –∑–∞–¥–∞—á –¥–æ–±–∞–≤–ª–µ–Ω–æ:</b> <u>{user_stat['total_tasks']}</u>\n"
        f"‚úÖ <b>–í—Å–µ–≥–æ –∑–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω–µ–Ω–æ:</b> <u>{user_stat['completed_tasks']}</u>",
        reply_markup=markup.get_menu(message.from_user.id), parse_mode=ParseMode.HTML)

@router_1.message(F.text.in_(['‚ÑπÔ∏è –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º', '/help', '/info']))
async def help(message: Message, state: FSMContext, user_repo):
    if not await check_and_notify_registration(message, user_repo):
        return

    if not await check_and_notify_fsm_state(message, state):
        return
    
    await message.answer(
            "<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–∞–º</b>\n\n"
            "/plan ‚Äî <i>–ø–æ–∫–∞–∑ —Ç–µ–∫—É—â–µ–≥–æ –ø–ª–∞–Ω–∞</i>\n"
            "/edit_plan ‚Äî <i>—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞</i>\n"    
            "/add_task ‚Äî <i>–¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É</i>\n"
            "/remove_task ‚Äî <i>—É–¥–∞–ª–∏—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–¥–∞—á–∏</i>\n"
            "/clear_plan ‚Äî <i>—É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏</i>\n"
            "/pay - <i>o—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ –ª–∏–º–∏—Ç—ã –∏ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –±–æ—Ç–∞</i>\n"
            "/statistic ‚Äî <i>—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞</i>\n" 
            "/profile - <i>–ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –∫ —Å–∞–π—Ç—É </i>\n",
                        parse_mode=ParseMode.HTML, reply_markup=markup.get_menu(message.from_user.id))

@router_1.message(F.text.in_(['üìã –ü–ª–∞–Ω', '/plan']))
async def show_plan(message: Message, state: FSMContext, vip_repo, user_repo):
    if not await check_and_notify_registration(message, user_repo):
        return

    if not await check_and_notify_fsm_state(message, state):
        return

    tasks = await fetch_tasks(user_id=message.from_user.id)
    if not tasks:
        await message.answer("‚ùóÔ∏è–í–∞—à –ø–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –ø—É—Å—Ç!", reply_markup=markup.get_menu(message.from_user.id))
    else:
        if await vip_repo.is_user_vip(user_id=message.from_user.id) and not is_admin(message.from_user.id):
            is_still_vip = datetime.datetime.now() < await vip_repo.get_vip_expiration(message.from_user.id)
            if not is_still_vip:
                await vip_repo.deactivate_vip(user_id=message.from_user.id)

        if await vip_repo.is_user_vip(user_id=message.from_user.id) or is_admin(message.from_user.id):
            completed_tasks = []
            not_completed_tasks = []

            for x in tasks:
                if list(x.values())[0] == '‚úÖ':
                    completed_tasks.append(x)
                else:
                    not_completed_tasks.append(x)

            if not completed_tasks:
                answer = "üóÇ <b>–¢–≤–æ–π –ø–ª–∞–Ω:</b>\n\n" + "\n".join(
                    [f"{i + 1}. {list(task.keys())[0]} - {list(task.values())[0]}" for i, task in
                     enumerate(not_completed_tasks)])
            elif completed_tasks and not_completed_tasks:
                answer = "üóÇ <b>–¢–≤–æ–π –ø–ª–∞–Ω:</b>\n\n" + "\n".join(
                    [f"{i + 1}. {list(task.keys())[0]} - {list(task.values())[0]}" for i, task in
                     enumerate(not_completed_tasks)]) + "\n‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n\n" + '\n'.join(
                    [f"{i + 1}. <s>{list(task.keys())[0]}</s> - {list(task.values())[0]}" for i, task in
                     enumerate(completed_tasks)])
            else:
                answer = "üóÇ <b>–¢–≤–æ–π –ø–ª–∞–Ω:</b>\n\n" + "\n".join(
                    [f"{i + 1}. {list(task.keys())[0]} - {list(task.values())[0]}" for i, task in
                     enumerate(completed_tasks)])
            await message.answer(text=answer, reply_markup=markup.get_menu(message.from_user.id), parse_mode=ParseMode.HTML)
        else:
            await message.answer(
                "üóÇ <b>–¢–≤–æ–π –ø–ª–∞–Ω:</b>\n\n" +
                "\n".join(
                    [f"{i + 1}. {list(task.keys())[0]} ‚Äî {list(task.values())[0]}" for
                     i, task in
                     enumerate(tasks)]),
                reply_markup=markup.get_menu(message.from_user.id),
                parse_mode=ParseMode.HTML
            )

@router_2.message(F.text.in_(['üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –ø–ª–∞–Ω', '/clear_plan']))
async def clear_plan(message: Message, state: FSMContext, user_repo):
    if not await check_and_notify_registration(message, user_repo):
        return

    if not await check_and_notify_fsm_state(message, state):
        return

    res = await delete_all_tasks(user_id=message.from_user.id)
    if res is True:
        await message.answer("‚ùóÔ∏è–¢–µ–ø–µ—Ä—å –≤–∞—à –ø–ª–∞–Ω –ø—É—Å—Ç", reply_markup=markup.get_menu(message.from_user.id))
    else:
        await message.answer("‚ùóÔ∏è–ü–ª–∞–Ω –∏ —Ç–∞–∫ –ø—É—Å—Ç", reply_markup=markup.edit_menu)

@router_2.message(F.text.in_(['üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω', '/edit_plan']))
async def edit_plan(message: Message, state: FSMContext, user_repo):
    if not await check_and_notify_registration(message, user_repo):
        return

    if not await check_and_notify_fsm_state(message, state):
        return

    await message.answer("üñã –ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ", reply_markup=markup.edit_menu)

@router_1.message(F.text.in_(['‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É', '/add_task']))
async def create_task_(message: Message, state: FSMContext, vip_repo, user_repo):
    if not await check_and_notify_registration(message, user_repo):
        return

    if not await check_and_notify_fsm_state(message, state):
        return

    if await count_user_tasks(user_id=message.from_user.id) < 3:
        await message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:", reply_markup=ReplyKeyboardRemove())
        await state.set_state(TaskForm.task_name)
    elif is_admin(message.from_user.id):
        await message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:", reply_markup=ReplyKeyboardRemove())
        await state.set_state(TaskForm.task_name)
    elif await vip_repo.is_user_vip(user_id=message.from_user.id):
        is_still_vip = datetime.datetime.now() < await vip_repo.get_vip_expiration(user_id=message.from_user.id)

        if is_still_vip:
            await message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:", reply_markup=ReplyKeyboardRemove())
            await state.set_state(TaskForm.task_name)
        elif not is_still_vip:
            await vip_repo.deactivate_vip(user_id=message.from_user.id)
            await message.answer("‚úçÔ∏è –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ—à–ª–∞, –ø—Ä–æ–¥–ª–∏—Ç—å - /pay", reply_markup=markup.edit_menu)
    else:
        await message.answer("‚úçÔ∏è –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω, /pay", reply_markup=markup.edit_menu)

@router_2.message(F.text.in_(['‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É', '/remove_task']))
async def initiate_task_removal(message: Message, state: FSMContext, user_repo):
    if not await check_and_notify_registration(message, user_repo):
        return

    if not await check_and_notify_fsm_state(message, state):
        return

    tasks = await fetch_tasks(user_id=message.from_user.id)

    if not tasks:
        await message.answer("‚ùóÔ∏è–í–∞—à –ø–ª–∞–Ω –ø—É—Å—Ç", reply_markup=markup.edit_menu)
    else:
        task_pairs = [(key, value) for task in tasks for key, value in task.items()]
        await message.answer("–í—ã–±–µ—Ä–µ—Ç–µ –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:\n\n" + "\n".join(
            [f"{i + 1}. {task[0]} - {task[1]}" for i, task in enumerate(task_pairs)]),
                             reply_markup=markup.inline_builder(num=await count_user_tasks(user_id=message.from_user.id),
                                                                emoji="üóë", action="delete"))

@router_2.message(F.text.in_(['‚úîÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏', '/edit_task_status']))
async def edit_task_status_(message: Message, state: FSMContext, user_repo):
    if not await check_and_notify_registration(message, user_repo):
        return

    if not await check_and_notify_fsm_state(message, state):
        return

    tasks = await fetch_tasks(user_id=message.from_user.id)
    if not tasks:
        await message.answer("‚ùóÔ∏è–í–∞—à –ø–ª–∞–Ω –ø—É—Å—Ç", reply_markup=markup.edit_menu)
    else:
        tasks = [f"{i + 1}. {task_id} - {status}" for i, task in enumerate(tasks) for task_id, status in task.items() if status == '‚ùå' ]
        if not tasks:
            await message.answer("‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!")
        else:
            await message.answer("–í—ã–±–µ—Ä–µ—Ç–µ –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å:\n\n" + "\n".join(
                                        [task for task in tasks]), 
                                        reply_markup=markup.inline_builder(num=await count_user_tasks(user_id=message.from_user.id), 
                                        emoji="‚úÖ", 
                                        action="update"))

@router_2.message(F.text.in_(['‚¨ÖÔ∏è –ù–∞–∑–∞–¥', ]))
async def back_1(message: Message, state: FSMContext, user_repo):
    if not await check_and_notify_registration(message, user_repo):
        return
    if not await check_and_notify_fsm_state(message, state):
        return

    await message.answer('‚öôÔ∏è –ú–µ–Ω—é', reply_markup=markup.get_menu(message.from_user.id))

@router_2.message(Command('pay'))
async def pay(message: Message, state: FSMContext, vip_repo, user_repo):
    if not await check_and_notify_registration(message, user_repo):
        return

    if not await check_and_notify_fsm_state(message, state):
        return

    if is_admin(message.from_user.id):
        await message.answer("üë®üèª‚Äçüíª –¢—ã –∏ —Ç–∞–∫ –∞–¥–º–∏–Ω", reply_markup=markup.get_menu(message.from_user.id))
    else:
        vip_until_date = await vip_repo.get_vip_expiration(user_id=message.from_user.id)
        await state.set_state(PaymentForm.payment)

        if vip_until_date is None:
            await message.answer("<b>–ü—Ä–∏–æ–±—Ä–µ—Ç–∞—è –ø—Ä–µ–º–∏—É–º, –≤—ã –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç–µ:</b>"
                                "\nüìå <i>–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ª–∏–º–∏—Ç–∞ –∑–∞–¥–∞—á</i>"
                                "\nüìå <i>–°–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –∑–∞–¥–∞—á –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é</i>"
                                "\nüìå <i>–ü–æ–¥–¥–µ—Ä–∂–∫—É –±–æ—Ç–∞ –∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ä–µ–∫–ª–∞–º—ã</i>"
                                "\n\n<i>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏:</i>", 
                                parse_mode=ParseMode.HTML, reply_markup=markup.vip_menu)
        else:
            if vip_until_date > datetime.datetime.now() + datetime.timedelta(days=999):
                await message.answer("<b>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –Ω–∞–≤—Å–µ–≥–¥–∞ ‚úÖ</b>"
                                    "\n\nüìå <i>–í—ã –æ—Ç–∫—Ä—ã–ª–∏ –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º!</i>"
                                    "\n\n<i>–•–æ—Ç–∏—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ?</i>", 
                                    parse_mode=ParseMode.HTML, reply_markup=markup.vip_menu)
            elif datetime.datetime.now() < vip_until_date:
                await message.answer(f"<b><u>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –µ—â–µ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {vip_until_date.strftime('%Y-%m-%d')}</u></b>"
                                    "\n\nüìå <i>–í—ã –æ—Ç–∫—Ä—ã–ª–∏ –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º!</i>"
                                    "\n\n<i>–•–æ—Ç–∏—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∏–ª–∏ –ø—Ä–æ–¥–ª–∏—Ç—å?</i>", 
                                    parse_mode=ParseMode.HTML, reply_markup=markup.vip_menu)

@router_1.message(TaskForm.task_name)
async def task_name(message: Message, state: FSMContext, stats_repo):
    if not message.text:
        return
    elif len(message.text) > 50:
        await message.answer("‚ùóÔ∏è–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 50 —Å–∏–º–≤–æ–ª–æ–≤\n\n‚úçÔ∏è  –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
        return

    await create_task(user_id=message.from_user.id, task_description=message.text)
    await stats_repo.increment_total_tasks(user_id=message.from_user.id)
    await state.clear()
    await message.answer('‚úÖ –ó–∞–¥–∞—á–∞ –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞', reply_markup=markup.edit_menu)

@router_1.callback_query(F.data.startswith('delete_'))
async def confirm_task_removal(call: CallbackQuery):
    task_num = int(call.data.split('_')[1])
    result = await delete_task_by_index(number_of_task=task_num, user_id=call.from_user.id)

    if result is True:
        tasks = await fetch_tasks(user_id=call.from_user.id)

        if not tasks:
            await call.message.answer("‚ùóÔ∏è–í–∞—à –ø–ª–∞–Ω –ø—É—Å—Ç", reply_markup=markup.edit_menu)
        else:
            task_pairs = [(key, value) for task in tasks for key, value in task.items()]
            await call.message.answer("–í—ã–±–µ—Ä–µ—Ç–µ –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:\n\n" + "\n".join(
                [f"{i + 1}. {task[0]} - {task[1]}" for i, task in enumerate(task_pairs)]),
                                 reply_markup=markup.inline_builder(num=await count_user_tasks(user_id=call.from_user.id),
                                                                    emoji="üóë", action="delete"))
        await call.answer("–£–¥–∞–ª–∏–ª")

    elif result is False:
        await call.answer("üò≥ –ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!")

@router_1.callback_query(F.data.startswith('update_'))
async def update_task_status(call: CallbackQuery, stats_repo):
    task_num = int(call.data.split('_')[1])
    result = await mark_task_completed(user_id=call.from_user.id, task_number=task_num)
    await stats_repo.increment_completed_tasks(user_id=call.from_user.id)

    if result is True:
        tasks = await fetch_tasks(user_id=call.from_user.id)

        if not tasks:
            await call.message.answer("‚ùóÔ∏è–í–∞—à –ø–ª–∞–Ω —Ç–µ–ø–µ—Ä—å –ø—É—Å—Ç", reply_markup=markup.get_menu(call.from_user.id))
            return
        
        tasks = [f"{i + 1}. {task_id} - {status}" for i, task in enumerate(tasks) for task_id, status in task.items() if status == '‚ùå' ]
        if not tasks:
            await call.message.answer("‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!")
            await call.answer("üéâ –£—Ä–∞! –í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!")
        else:
            await call.message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å:\n\n" + "\n".join([task for task in tasks]), parse_mode=ParseMode.HTML,
                reply_markup=markup.inline_builder(num=await count_user_tasks(user_id=call.from_user.id), emoji="‚úÖ", action="update"))
            await call.answer("‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª")

    elif result is False:
        await call.answer("üò≥ –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!")

@router_1.callback_query(F.data == 'vip_1_week_access')
async def vip_1_week_access_(call: CallbackQuery, state: FSMContext):
    await call.answer()

    await state.set_state(PaymentForm.waiting_for_payment)
    await call.message.answer_invoice(
        title='–ü–æ–∫—É–ø–∫–∞ –ø—Ä–µ–º–∏—É–º–∞',
        description="–ü—Ä–∏–æ–±—Ä–µ—Ç–∞—è –ø—Ä–µ–º–∏—É–º, –≤—ã –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç–µ –¥–ª—è —Å–µ–±—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:"
                                 "\n\nüìå –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ª–∏–º–∏—Ç–∞ –∑–∞–¥–∞—á"
                                 "\nüìå –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∑–∞–¥–∞—á –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é"
                                 "\nüìå –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ä–µ–∫–ª–∞–º—ã"
                                 "\nüìå –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –±–æ—Ç–∞",
        payload='vip_1_week_access',
        currency='XTR',
        prices=[LabeledPrice(label='XTR', amount=100)]
    )

@router_1.callback_query(F.data == 'vip_1_month_access')
async def vip_1_month_access_(call: CallbackQuery, state: FSMContext):
    await call.answer()

    await state.set_state(PaymentForm.waiting_for_payment)
    await call.message.answer_invoice(
        title='–ü–æ–∫—É–ø–∫–∞ –ø—Ä–µ–º–∏—É–º–∞',
        description="–ü—Ä–∏–æ–±—Ä–µ—Ç–∞—è –ø—Ä–µ–º–∏—É–º, –≤—ã –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç–µ –¥–ª—è —Å–µ–±—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:"
                                 "\n\nüìå –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ª–∏–º–∏—Ç–∞ –∑–∞–¥–∞—á"
                                 "\nüìå –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∑–∞–¥–∞—á –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é"
                                 "\nüìå –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ä–µ–∫–ª–∞–º—ã"
                                 "\nüìå –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –±–æ—Ç–∞",
        payload='vip_1_month_access',
        currency='XTR',
        prices=[LabeledPrice(label='XTR', amount=200)]
    )

@router_1.callback_query(F.data == 'vip_1_year_access')
async def vip_1_year_access_(call: CallbackQuery, state: FSMContext):
    await call.answer()

    await state.set_state(PaymentForm.waiting_for_payment)
    await call.message.answer_invoice(
        title='–ü–æ–∫—É–ø–∫–∞ –ø—Ä–µ–º–∏—É–º–∞',
        description="–ü—Ä–∏–æ–±—Ä–µ—Ç–∞—è –ø—Ä–µ–º–∏—É–º, –≤—ã –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç–µ –¥–ª—è —Å–µ–±—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:"
                                 "\n\nüìå –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ª–∏–º–∏—Ç–∞ –∑–∞–¥–∞—á"
                                 "\nüìå –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∑–∞–¥–∞—á –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é"
                                 "\nüìå –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ä–µ–∫–ª–∞–º—ã"
                                 "\nüìå –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –±–æ—Ç–∞",
        payload='vip_1_year_access',
        currency='XTR',
        prices=[LabeledPrice(label='XTR', amount=500)]
    )

@router_1.pre_checkout_query()
async def process_pre_checkout_query(event: PreCheckoutQuery, state: FSMContext):
    await event.answer(ok=True)
    await state.clear()

@router_1.message(F.successful_payment)
async def process_successful_payment(message: Message, vip_repo):
    payload = message.successful_payment.invoice_payload

    if payload == 'vip_1_week_access':
        vip_until = datetime.datetime.now() + datetime.timedelta(days=7)
    elif payload == 'vip_1_month_access':
        vip_until = datetime.datetime.now() + datetime.timedelta(days=30)
    elif payload == 'vip_1_year_access':
        vip_until = datetime.datetime.now() + datetime.timedelta(days=365)
    else:
        return

    await vip_repo.activate_vip(user_id=message.from_user.id, until=vip_until)

    await message.answer("ü•≥ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É –±–æ—Ç–∞. –í—Å–µ —É—Å–ª—É–≥–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã!"
                         f"\n\n<b><u>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —Ç–µ–ø–µ—Ä—å –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {vip_until.strftime('%Y-%m-%d')}</u></b>",
                         parse_mode=ParseMode.HTML,
                         reply_markup=markup.get_menu(message.from_user.id))

@router_1.my_chat_member(ChatMemberUpdatedFilter(member_status_changed=IS_NOT_MEMBER))
async def user_blocked_bot_(event: ChatMemberUpdatedFilter, user_repo):
    await user_repo.user_blocked_bot(user_id=event.from_user.id)

@router_1.my_chat_member(ChatMemberUpdatedFilter(member_status_changed=IS_MEMBER))
async def user_unblocked_bot_(event: ChatMemberUpdatedFilter, user_repo):
    await user_repo.user_unblocked_bot(user_id=event.from_user.id)