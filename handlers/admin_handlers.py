import datetime
import os

from aiogram import Bot, F, Router
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message, ReplyKeyboardRemove
from dotenv import load_dotenv

from keyboards import markup
from config import admin_id
from database import (get_all_not_vip_users, get_all_tasks, get_all_users,
                      get_all_users_id, get_all_vip_users, get_user_is_banned,
                      is_user_in_database, is_vip, set_vip)
from utils import (PostForm, VipForm, check_and_notify_fsm_state,
                   check_and_notify_registration)

router = Router()

@router.message(F.text == '‚û°Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å')
async def admin_panel(message: Message, state: FSMContext):
    if not await check_and_notify_registration(message):
        return
    if not await check_and_notify_fsm_state(message, state):
        return

    if message.from_user.id == int(admin_id):
        await message.answer("üë®üèª‚Äçüíª –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞:", reply_markup=markup.admin_panel)
    else:
        await message.answer("ü§∑üèª –ù–µ–ø–æ–Ω—è—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", reply_markup=markup.get_menu(False))

@router.message(F.text == 'üë• –í—ã–≤–µ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
async def show_all_users(message: Message, state: FSMContext):
    if not await check_and_notify_registration(message):
        return

    if not await check_and_notify_fsm_state(message, state):
        return

    if message.from_user.id == int(admin_id):
        users = await get_all_users()
        users_data = [f"{i} - {x} - @{z} - {y}" for i, x, z, y in users]
        await message.answer(text="\n".join(users_data))
    else:
        await message.answer("ü§∑üèª –ù–µ–ø–æ–Ω—è—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", reply_markup=markup.get_menu(False))

@router.message(F.text == 'üìã –í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏')
async def show_all_collections(message: Message, state: FSMContext):
    if not await check_and_notify_registration(message):
        return

    if not await check_and_notify_fsm_state(message, state):
        return

    if message.from_user.id == int(admin_id):
        collections = await get_all_tasks()
        await message.answer(text=f"\n".join(collections))
    else:
        await message.answer("ü§∑üèª –ù–µ–ø–æ–Ω—è—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", reply_markup=markup.get_menu(False))

@router.message(F.text == 'ü™ß –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç —Ä–µ–∫–ª–∞–º—ã')
async def create_post_advertisement(message: Message, state: FSMContext):
    if not await check_and_notify_registration(message):
        return

    if not await check_and_notify_fsm_state(message, state):
        return

    if message.from_user.id == int(admin_id):
        await message.answer("üìñ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:", parse_mode=ParseMode.MARKDOWN, reply_markup=ReplyKeyboardRemove())
        await state.set_state(PostForm.text)
    else:
        await message.answer("ü§∑üèª –ù–µ–ø–æ–Ω—è—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", reply_markup=markup.get_menu(False))

@router.message(F.text == '‚ÑπÔ∏è –í—ã–≤–µ—Å—Ç–∏ –∫–æ–ª. vip –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
async def create_post_advertisement(message: Message, state: FSMContext):
    if not await check_and_notify_registration(message):
        return

    if not await check_and_notify_fsm_state(message, state):
        return

    if message.from_user.id == int(admin_id):
        vip_users = await get_all_vip_users()
        await message.answer(f"{len(vip_users)} vip –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", parse_mode=ParseMode.MARKDOWN)
    else:
        await message.answer("ü§∑üèª –ù–µ–ø–æ–Ω—è—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", reply_markup=markup.get_menu(False))

@router.message(F.text == '‚ÑπÔ∏è –í—ã–≤–µ—Å—Ç–∏ –∫–æ–ª. –Ω–µ vip –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
async def create_post_advertisement(message: Message, state: FSMContext):
    if not await check_and_notify_registration(message):
        return

    if not await check_and_notify_fsm_state(message, state):
        return

    if message.from_user.id == int(admin_id):
        not_vip_users = await get_all_not_vip_users()
        await message.answer(f"{len(not_vip_users)} –Ω–µ vip –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", parse_mode=ParseMode.MARKDOWN)
    else:
        await message.answer("ü§∑üèª –ù–µ–ø–æ–Ω—è—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", reply_markup=markup.get_menu(False))

@router.message(F.text == 'üéÅ –ü–æ–¥–∞—Ä–∏—Ç—å –≤–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')
async def gift_the_vip(message: Message, state: FSMContext):
    if not await check_and_notify_registration(message):
        return

    if not await check_and_notify_fsm_state(message, state):
        return

    if message.from_user.id == int(admin_id):
        await message.answer("üÜî –í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", parse_mode=ParseMode.MARKDOWN,
                             reply_markup=ReplyKeyboardRemove())
        await state.set_state(VipForm.user_name)
    else:
        await message.answer("ü§∑üèª –ù–µ–ø–æ–Ω—è—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", reply_markup=markup.get_menu(False))


@router.message(VipForm.user_name, F.text)
async def post_text(message: Message, state: FSMContext):
    if not await check_and_notify_registration(message):
        return

    await state.update_data(user_name=message.md_text)
    await message.answer("‚úîÔ∏è –Æ–∑–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω\n\nüìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É vip —Å—Ç–∞—Ç—É—Å–∞ (1w/1m/1y):")
    await state.set_state(VipForm.date)

@router.message(VipForm.date, F.text)
async def post_text(message: Message, state: FSMContext):
    if not await check_and_notify_registration(message):
        return

    await state.update_data(until_date=message.md_text)
    data = await state.get_data()

    if not await is_user_in_database(telegram_id=int(data['user_name'])):
        await message.answer(f"‚ö†Ô∏è –ë—ã–ª –≤–≤–µ–¥–µ–Ω <b>–Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π id</b>", parse_mode=ParseMode.HTML,
                             reply_markup=markup.get_menu(True))
        await state.clear()
        return
    try:
        if data['until_date'] in ('1w', '1m', '1y'):
            until_date = None

            if data['until_date'] == '1w':
                until_date = datetime.datetime.now() + datetime.timedelta(days=7)
            elif data['until_date'] == '1m':
                until_date = datetime.datetime.now() + datetime.timedelta(days=30)
            elif data['until_date'] == '1y':
                until_date = datetime.datetime.now() + datetime.timedelta(days=365)

            await set_vip(user_id=int(data['user_name']), until=until_date)
            await message.answer(f'ü•≥ Vip —Å—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∞—Ä–µ–Ω', reply_markup=markup.get_menu(True))
        else:
            await message.answer(f'‚ö†Ô∏è <b>–î–∞—Ç–∞</b> –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ', parse_mode=ParseMode.HTML,
                                 reply_markup=markup.get_menu(True))
    except Exception as ex:
        await message.answer(f'‚ö†Ô∏è <b>–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ–¥–∞—Ä–∏—Ç—å vip, –æ—à–∏–±–∫–∞</b> - {ex}', parse_mode=ParseMode.HTML,
                             reply_markup=markup.get_menu(True))
    finally:
        await state.clear()


@router.message(PostForm.text, F.text)
async def post_text(message: Message, state: FSMContext):
    if not await check_and_notify_registration(message):
        return

    await state.update_data(text=message.md_text)
    await message.answer("‚úîÔ∏è –¢–µ–∫—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω\n\nüñº –î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ:")
    await state.set_state(PostForm.picture)


@router.message(PostForm.picture)
async def post_picture(message: Message, state: FSMContext):
    if not await check_and_notify_registration(message):
        return

    if not message.photo:
        return
    await state.update_data(picture=message.photo[-1].file_id)
    data = await state.get_data()
    await state.set_state(PostForm.confirm)

    await message.answer_photo(data['picture'], caption=data['text'], parse_mode=ParseMode.MARKDOWN, reply_markup=markup.get_post_confirm())

@router.callback_query(PostForm.confirm)
async def is_post_confirm(callback_query: CallbackQuery, state: FSMContext):

    if callback_query.data == 'post_confirm':
        load_dotenv()
        bot_token = os.environ.get('BOT_TOKEN')

        bot = Bot(token=bot_token)
        counter = 0
        data = await state.get_data()

        for (tg_id) in await get_all_users_id():
            if not await get_user_is_banned(user_id=tg_id):
                if not await is_vip(user_id=tg_id):
                    await bot.send_photo(chat_id=tg_id, photo=data['picture'], caption=data['text'], parse_mode=ParseMode.MARKDOWN)
                    counter += 1

        await state.clear()
        await callback_query.message.answer(f"üÜí –†–µ–∫–ª–∞–º–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞, {counter} —é–∑–µ—Ä–æ–≤ –ø–æ–ª—É—á–∏–ª–∏ —Ä–µ–∫–ª–∞–º—É.", reply_markup=markup.admin_panel)
        await callback_query.answer()

    elif callback_query.data == 'post_cancel':
        await state.clear()
        await callback_query.message.answer("üòû –†–∞—Å—Å—ã–ª–∫–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=markup.admin_panel)
        await callback_query.answer()

@router.message()
async def error(message: Message):
    if not await check_and_notify_registration(message):
        return

    if message.from_user.id == int(admin_id):
        await message.answer("ü§∑üèª –ù–µ–ø–æ–Ω—è—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", reply_markup=markup.get_menu(True))
    else:
        await message.answer("ü§∑üèª –ù–µ–ø–æ–Ω—è—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", reply_markup=markup.get_menu(False))