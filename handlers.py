from aiogram import Router, F
from aiogram.fsm.context import FSMContext

from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.filters import Command

import markup
from utils import TaskForm
from database import is_user_in_database, new_user_insert, tasks_collection, get_tasks, add_task, edit_task, delete_all_tasks,  delete_task, count_tasks

router = Router()

@router.message(Command('start'))
async def start(message: Message):
    if is_user_in_database(telegram_id=message.from_user.id):
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!", reply_markup=markup.main_menu)
    else:
        new_user_insert(user_id=message.from_user.id,
                        first_name=message.from_user.first_name,
                        last_name=message.from_user.last_name)
        await message.answer("–ü—Ä–∏–≤–µ—Ç, –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å, —É–¥–∞—á–∏ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏!", reply_markup=markup.main_menu)

@router.message(F.text.in_(['‚ÑπÔ∏è–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º', '/help', '/info']))
async def help(message: Message):
    if not is_user_in_database(telegram_id=message.from_user.id):
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –Ω–∞–∂–º–∏—Ç–µ /start!", reply_markup=ReplyKeyboardRemove())
    else:
        await message.answer(
            "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n\n"
            "/plan - –ø–æ–∫–∞–∑ —Ç–µ–∫—É—â–µ–≥–æ –ø–ª–∞–Ω–∞\n"
            "/edit_plan - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞\n"
            "/add_task - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É\n"
            "/remove_task - —É–¥–∞–ª–∏—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–¥–∞—á–∏\n"
            "/clear_plan - —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏\n", reply_markup=markup.main_menu)

@router.message(F.text.in_(['üìã–ü–ª–∞–Ω', '/plan']))
async def show_plan(message: Message):
    if not is_user_in_database(telegram_id=message.from_user.id):
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –Ω–∞–∂–º–∏—Ç–µ /start!", reply_markup=ReplyKeyboardRemove())
    else:
        tasks = await get_tasks(user_id=message.from_user.id)

        if not tasks:
            await message.answer("‚ùóÔ∏è–í–∞—à –ü–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –ø—É—Å—Ç!", reply_markup=markup.main_menu)
        else:
            await message.answer(f"–¢–≤–æ–π –ø–ª–∞–Ω:\n\n" + "\n".join([f"{i+1}. {task} - ‚è≥" for i, task in enumerate(tasks)]), reply_markup=markup.main_menu)

@router.message(F.text.in_(['/clear_plan']))
async def clear_plan(message: Message):
    if not is_user_in_database(telegram_id=message.from_user.id):
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –Ω–∞–∂–º–∏—Ç–µ /start!", reply_markup=ReplyKeyboardRemove())
    else:
        res = await delete_all_tasks(user_id=message.from_user.id)

        if res is True:
            await message.answer(f"‚ùóÔ∏è–¢–µ–ø–µ—Ä—å –≤–∞—à –ø–ª–∞–Ω –ø—É—Å—Ç", reply_markup=markup.main_menu)
        else:
            await message.answer(f"‚ùóÔ∏è–ü–ª–∞–Ω –∏ —Ç–∞–∫ –ø—É—Å—Ç!", reply_markup=markup.main_menu)

@router.message(F.text.in_(['üìù–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω', '/edit_plan']))
async def edit_plan(message: Message):
    if not is_user_in_database(telegram_id=message.from_user.id):
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –Ω–∞–∂–º–∏—Ç–µ /start!", reply_markup=ReplyKeyboardRemove())
    else:
        tasks = await get_tasks(user_id=message.from_user.id)
        await message.answer(f"–¢–≤–æ–π –ø–ª–∞–Ω:\n\n" + "\n".join([f"‚è≥{i + 1}. {task}" for i, task in enumerate(tasks)]),
                             reply_markup=markup.edit_menu)

@router.message(F.text.in_(['‚ûï–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É', '/add_task']))
async def create_task(message: Message, state: FSMContext):
    if not is_user_in_database(telegram_id=message.from_user.id):
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –Ω–∞–∂–º–∏—Ç–µ /start!", reply_markup=ReplyKeyboardRemove())
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:", reply_markup=ReplyKeyboardRemove())
        await state.set_state(TaskForm.task_name)

@router.message(TaskForm.task_name)
async def task_name(message: Message, state: FSMContext):
    await add_task(user_id=message.from_user.id, task_description=message.text)
    await state.clear()
    await message.answer('‚úÖ–ó–∞–¥–∞—á–∞ –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞', reply_markup=markup.edit_menu)

@router.message(F.text.in_(['‚ùå–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É', '/remove_task']))
async def remove_task(message: Message):
    if not is_user_in_database(telegram_id=message.from_user.id):
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –Ω–∞–∂–º–∏—Ç–µ /start!", reply_markup=ReplyKeyboardRemove())
    else:
        tasks = await get_tasks(user_id=message.from_user.id)

        if not tasks:
            await message.answer("‚ùóÔ∏è–í–∞—à –ø–ª–∞–Ω –ø—É—Å—Ç", reply_markup=markup.edit_menu)
        else:
            await message.answer(f"–í—ã–±–µ—Ä–µ—Ç–µ –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:\n\n" + "\n".join([f"{i + 1}. {task}" for i, task in enumerate(tasks)]),
                                 reply_markup=markup.inline_builder(num=await count_tasks(user_id=message.from_user.id)).as_markup())

@router.callback_query(F.data.startswith('delete_'))
async def task_remove(call: CallbackQuery):
    task_num = int(call.data.split('_')[1])
    result = await delete_task(number_of_task=task_num, user_id=call.from_user.id)

    if result is True:
        tasks = await get_tasks(user_id=call.from_user.id)

        if not tasks:
            await call.message.answer("‚ùóÔ∏è–¢–µ–ø–µ—Ä—å –≤–∞—à –ø–ª–∞–Ω –ø—É—Å—Ç", reply_markup=markup.edit_menu)
        else:
            await call.message.answer(f"–í—ã–±–µ—Ä–µ—Ç–µ –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:\n\n" + "\n".join([f"{i + 1}. {task}" for i, task in enumerate(tasks)]),
                                 reply_markup=markup.inline_builder(num=await count_tasks(user_id=call.from_user.id)).as_markup())
        await call.answer("–£–¥–∞–ª–∏–ª")

    elif result is False:
        await call.answer("–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!")

@router.message(F.text.in_(['‚¨ÖÔ∏è–ù–∞–∑–∞–¥', ]))
async def back(message: Message):
    if not is_user_in_database(telegram_id=message.from_user.id):
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –Ω–∞–∂–º–∏—Ç–µ /start!", reply_markup=ReplyKeyboardRemove())
    else:
        await message.answer('‚öôÔ∏è –ú–µ–Ω—é', reply_markup=markup.main_menu)

@router.message()
async def error(message: Message):
    if not is_user_in_database(telegram_id=message.from_user.id):
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –Ω–∞–∂–º–∏—Ç–µ /start!", reply_markup=ReplyKeyboardRemove())
    else:
        await message.answer("–ù–µ–ø–æ–Ω—è—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!", reply_markup=markup.main_menu)