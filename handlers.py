from aiogram import Router, F
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.filters import Command
from dotenv import load_dotenv
import os


import markup
from utils import TaskForm, check_and_notify_registration, check_and_notify_fsm_state
from database import (is_user_in_database, new_user_insert,get_tasks, add_task, edit_task_status,
                      delete_all_tasks, delete_task, count_tasks, get_all_tasks, get_all_users)

load_dotenv()

admin_id = os.getenv('ADMIN_ID')
router = Router()


@router.message(F.text == '‚û°Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å')
async def admin_panel(message: Message, state: FSMContext):
    if not await check_and_notify_registration(message):
        return
    if not await check_and_notify_fsm_state(message, state):
        return

    if message.from_user.id == int(admin_id):
        await message.answer("üë®üèª‚Äçüíª –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞:", reply_markup=markup.admin_panel)
    else:
        await message.answer("ü§∑üèª –ù–µ–ø–æ–Ω—è—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", reply_markup=markup.get_menu(False))

@router.message(F.text == 'üë• –í—ã–≤–µ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
async def show_all_users(message: Message, state: FSMContext):
    if not await check_and_notify_registration(message):
        return

    if not await check_and_notify_fsm_state(message, state):
        return

    if message.from_user.id == int(admin_id):
        users = get_all_users()
        users_data = [f"{i} - {x} - {z}" for i, x, z in users]
        await message.answer(text="\n".join(users_data))
    else:
        await message.answer("ü§∑üèª –ù–µ–ø–æ–Ω—è—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", reply_markup=markup.get_menu(False))

@router.message(F.text == 'üìã –í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏')
async def show_all_collections(message: Message, state: FSMContext):
    if not await check_and_notify_registration(message):
        return

    if not await check_and_notify_fsm_state(message, state):
        return

    if message.from_user.id == int(admin_id):
        collections = await get_all_tasks()
        await message.answer(text=f"\n".join(collections))
    else:
        await message.answer("ü§∑üèª –ù–µ–ø–æ–Ω—è—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", reply_markup=markup.get_menu(False))

@router.message(Command('start'))
async def start(message: Message, state: FSMContext):
    if not await check_and_notify_fsm_state(message, state):
        return

    if is_user_in_database(telegram_id=message.from_user.id):
        if message.from_user.id == int(admin_id):
            await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!", reply_markup=markup.get_menu(True))
        else:
            await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!", reply_markup=markup.get_menu(False))
    else:
        new_user_insert(user_id=message.from_user.id,
                        first_name=message.from_user.first_name,
                        last_name=message.from_user.last_name)
        await message.answer("üëã –ü—Ä–∏–≤–µ—Ç, –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å, —É–¥–∞—á–∏ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏!", reply_markup=markup.get_menu(False))

@router.message(F.text.in_(['‚ÑπÔ∏è–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º', '/help', '/info']))
async def help(message: Message, state: FSMContext):
    if not await check_and_notify_registration(message):
        return

    if not await check_and_notify_fsm_state(message, state):
        return
    if message.from_user.id == int(admin_id):
        await message.answer("<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–∞–º</b>\n\n"
                "/plan ‚Äî <i>–ø–æ–∫–∞–∑ —Ç–µ–∫—É—â–µ–≥–æ –ø–ª–∞–Ω–∞</i>\n"
                "/edit_plan ‚Äî <i>—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞</i>\n"
                "/add_task ‚Äî <i>–¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É</i>\n"
                "/remove_task ‚Äî <i>—É–¥–∞–ª–∏—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–¥–∞—á–∏</i>\n"
                "/clear_plan ‚Äî <i>—É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏</i>\n",
                             parse_mode=ParseMode.HTML, reply_markup=markup.get_menu(True))
    else:
        await message.answer(
                "<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–∞–º</b>\n\n"
                "/plan ‚Äî <i>–ø–æ–∫–∞–∑ —Ç–µ–∫—É—â–µ–≥–æ –ø–ª–∞–Ω–∞</i>\n"
                "/edit_plan ‚Äî <i>—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞</i>\n"
                "/add_task ‚Äî <i>–¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É</i>\n"
                "/remove_task ‚Äî <i>—É–¥–∞–ª–∏—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–¥–∞—á–∏</i>\n"
                "/clear_plan ‚Äî <i>—É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏</i>\n", parse_mode=ParseMode.HTML, reply_markup=markup.get_menu(False))

@router.message(F.text.in_(['üìã–ü–ª–∞–Ω', '/plan']))
async def show_plan(message: Message, state: FSMContext):
    if not await check_and_notify_registration(message):
        return

    if not await check_and_notify_fsm_state(message, state):
        return

    tasks = await get_tasks(user_id=message.from_user.id)
    if not tasks:
        if message.from_user.id == int(admin_id):
            await message.answer("‚ùóÔ∏è–í–∞—à –ø–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –ø—É—Å—Ç!", reply_markup=markup.get_menu(True))
        else:
            await message.answer("‚ùóÔ∏è–í–∞—à –ø–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –ø—É—Å—Ç!", reply_markup=markup.get_menu(False))
    else:
        if message.from_user.id == int(admin_id):
            await message.answer(
                "üóÇ <b>–¢–≤–æ–π –ø–ª–∞–Ω:</b>\n\n" +
                "\n".join(
                    [f"{i + 1}. {list(task.keys())[0]} ‚Äî {'‚úÖ' if list(task.values())[0] == '–í—ã–ø–æ–ª–Ω–µ–Ω–æ' else '‚ùå'}" for
                     i, task in
                     enumerate(tasks)]),
                reply_markup=markup.get_menu(True),
                parse_mode=ParseMode.HTML
            )
        else:
            await message.answer(
                "üóÇ <b>–¢–≤–æ–π –ø–ª–∞–Ω:</b>\n\n" +
                "\n".join(
                    [f"{i + 1}. {list(task.keys())[0]} ‚Äî {'‚úÖ' if list(task.values())[0] == '–í—ã–ø–æ–ª–Ω–µ–Ω–æ' else '‚ùå'}" for
                     i, task in
                     enumerate(tasks)]),
                reply_markup=markup.get_menu(False),
                parse_mode=ParseMode.HTML
            )

@router.message(F.text.in_(['üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –ø–ª–∞–Ω', '/clear_plan']))
async def clear_plan(message: Message, state: FSMContext):
    if not await check_and_notify_registration(message):
        return

    if not await check_and_notify_fsm_state(message, state):
        return

    res = await delete_all_tasks(user_id=message.from_user.id)
    if res is True:
        if message.from_user.id == int(admin_id):
            await message.answer(f"‚ùóÔ∏è–¢–µ–ø–µ—Ä—å –≤–∞—à –ø–ª–∞–Ω –ø—É—Å—Ç", reply_markup=markup.get_menu(True))
        else:
            await message.answer(f"‚ùóÔ∏è–¢–µ–ø–µ—Ä—å –≤–∞—à –ø–ª–∞–Ω –ø—É—Å—Ç", reply_markup=markup.get_menu(False))
    else:
        await message.answer(f"‚ùóÔ∏è–ü–ª–∞–Ω –∏ —Ç–∞–∫ –ø—É—Å—Ç", reply_markup=markup.edit_menu)

@router.message(F.text.in_(['üìù–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω', '/edit_plan']))
async def edit_plan(message: Message, state: FSMContext):
    if not await check_and_notify_registration(message):
        return

    if not await check_and_notify_fsm_state(message, state):
        return

    await message.answer("üñã –ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ", reply_markup=markup.edit_menu)

@router.message(F.text.in_(['‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É', '/add_task']))
async def create_task(message: Message, state: FSMContext):
    if not await check_and_notify_registration(message):
        return

    if not await check_and_notify_fsm_state(message, state):
        return

    await message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(TaskForm.task_name)

@router.message(F.text.in_(['‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É', '/remove_task']))
async def initiate_task_removal(message: Message, state: FSMContext):
    if not await check_and_notify_registration(message):
        return

    if not await check_and_notify_fsm_state(message, state):
        return

    tasks = await get_tasks(user_id=message.from_user.id)

    if not tasks:
        await message.answer("‚ùóÔ∏è–í–∞—à –ø–ª–∞–Ω –ø—É—Å—Ç", reply_markup=markup.edit_menu)
    else:

        tasks = [key for task in tasks for key in task.keys()]
        await message.answer(f"–í—ã–±–µ—Ä–µ—Ç–µ –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:\n\n" + "\n".join(
            [f"{i + 1}. {task}" for i, task in enumerate(tasks)]),
                             reply_markup=markup.inline_builder(num=await count_tasks(user_id=message.from_user.id),
                                                                emoji="üóë", action="delete"))

@router.message(F.text.in_(['‚úîÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏', '/edit_task_status']))
async def edit_task_status_(message: Message, state: FSMContext):
    if not await check_and_notify_registration(message):
        return

    if not await check_and_notify_fsm_state(message, state):
        return

    tasks = await get_tasks(user_id=message.from_user.id)
    if not tasks:
        await message.answer("‚ùóÔ∏è–í–∞—à –ø–ª–∞–Ω –ø—É—Å—Ç", reply_markup=markup.edit_menu)
    else:
        tasks = [key for task in tasks for key in task.keys()]
        ReplyKeyboardRemove()
        await message.answer(f"–í—ã–±–µ—Ä–µ—Ç–µ –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å:\n\n" + "\n".join(
            [f"{i + 1}. {task}" for i, task in enumerate(tasks)]),
                             reply_markup=markup.inline_builder(num=await count_tasks(user_id=message.from_user.id),
                                                                emoji="‚úÖ", action="update"))

@router.message(F.text.in_(['‚¨ÖÔ∏è –ù–∞–∑–∞–¥', ]))
async def back_1(message: Message, state: FSMContext):
    if not await check_and_notify_registration(message):
        return
    if not await check_and_notify_fsm_state(message, state):
        return

    if message.from_user.id == int(admin_id):
        await message.answer('‚öôÔ∏è –ú–µ–Ω—é', reply_markup=markup.get_menu(True))
    else:
        await message.answer('‚öôÔ∏è –ú–µ–Ω—é', reply_markup=markup.get_menu(False))

@router.message(TaskForm.task_name)
async def task_name(message: Message, state: FSMContext):
    if len(message.text) > 50:
        await message.answer("‚ùóÔ∏è–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 50 —Å–∏–º–≤–æ–ª–æ–≤\n\n‚úçÔ∏è  –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
        return
    await add_task(user_id=message.from_user.id, task_description=message.text)
    await state.clear()
    await message.answer('‚úÖ –ó–∞–¥–∞—á–∞ –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞', reply_markup=markup.edit_menu)

@router.callback_query(F.data.startswith('delete_'))
async def confirm_task_removal(call: CallbackQuery):
    task_num = int(call.data.split('_')[1])
    result = await delete_task(number_of_task=task_num, user_id=call.from_user.id)

    if result is True:
        tasks = await get_tasks(user_id=call.from_user.id)

        tasks = [key for task in tasks for key in task.keys()]

        if not tasks:
            await call.message.answer("‚ùóÔ∏è–í–∞—à –ø–ª–∞–Ω –ø—É—Å—Ç", reply_markup=markup.edit_menu)
        else:
            await call.message.answer(f"–í—ã–±–µ—Ä–µ—Ç–µ –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:\n\n" + "\n".join(
                [f"{i + 1}. {task}" for i, task in enumerate(tasks)]),
                                 reply_markup=markup.inline_builder(num=await count_tasks(user_id=call.from_user.id),
                                                                    emoji="üóë", action="delete"))
        await call.answer("–£–¥–∞–ª–∏–ª")

    elif result is False:
        await call.answer("–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!")

@router.callback_query(F.data.startswith('update_'))
async def update_task_status(call: CallbackQuery):
    task_num = int(call.data.split('_')[1])
    result = await edit_task_status(user_id=call.from_user.id, task_number=task_num)

    if result is True:
        tasks = await get_tasks(user_id=call.from_user.id)

        if not tasks:
            if call.from_user.id == int(admin_id):
                await call.message.answer("‚ùóÔ∏è–í–∞—à –ø–ª–∞–Ω —Ç–µ–ø–µ—Ä—å –ø—É—Å—Ç", reply_markup=markup.get_menu(True))
            else:
                await call.message.answer("‚ùóÔ∏è–í–∞—à –ø–ª–∞–Ω —Ç–µ–ø–µ—Ä—å –ø—É—Å—Ç", reply_markup=markup.get_menu(False))
            return

        tasks_list = [
            f"{i + 1}. {list(task.keys())[0]} - <i>{list(task.values())[0]}</i>"
            for i, task in enumerate(tasks)
        ]

        await call.message.answer(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å:\n\n" + "\n".join(tasks_list), parse_mode=ParseMode.HTML,
            reply_markup=markup.inline_builder(num=await count_tasks(user_id=call.from_user.id), emoji="‚úÖ", action="update"))
        await call.answer("–û–±–Ω–æ–≤–∏–ª")

    elif result is False:
        await call.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!")

@router.message()
async def error(message: Message):
    if not await check_and_notify_registration(message):
        return

    if message.from_user.id == int(admin_id):
        await message.answer("ü§∑üèª –ù–µ–ø–æ–Ω—è—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", reply_markup=markup.get_menu(True))
    else:
        await message.answer("ü§∑üèª –ù–µ–ø–æ–Ω—è—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", reply_markup=markup.get_menu(False))