from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.filters import Command
import markup

from database import is_user_in_database, new_user_insert, tasks_collection, get_tasks, add_task, edit_task, delete_all_tasks

router = Router()

@router.message(Command('start'))
async def start(message: Message):
    if is_user_in_database(telegram_id=message.from_user.id):
        await message.reply("–ü—Ä–∏–≤–µ—Ç, –≤—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!", reply_markup=markup.main_menu)
    else:
        new_user_insert(user_id=message.from_user.id,
                        first_name=message.from_user.first_name,
                        last_name=message.from_user.last_name)
        await message.answer("–ü—Ä–∏–≤–µ—Ç, –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å, —É–¥–∞—á–∏ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏!", reply_markup=markup.main_menu)

@router.message(F.text.in_(['‚ÑπÔ∏è–ü–æ–º–æ—â—å', '/help']))
async def help(message: Message):
    await message.answer(
        "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n\n"
        "/plan - –ø–æ–∫–∞–∑ —Ç–µ–∫—É—â–µ–≥–æ –ø–ª–∞–Ω–∞\n"
        "/edit_plan - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞\n",
        reply_markup=markup.main_menu
    )

@router.message(F.text.in_(['üìã–ü–ª–∞–Ω', '/plan']))
async def show_plan(message: Message):
    tasks = await get_tasks(user_id=message.from_user.id)
    if not tasks:
        await message.answer("‚ùóÔ∏è–í–∞—à –ü–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –ø—É—Å—Ç!", reply_markup=markup.main_menu)
    else:
        await message.answer(f"–¢–≤–æ–π –ø–ª–∞–Ω:\n\n" + "\n".join([f"‚è≥{i+1}. {task}" for i, task in enumerate(tasks)]))


@router.message(F.text.in_(['/add']))
async def add_plan(message: Message):
    tasks = await add_task(user_id=message.from_user.id, task_description='–°–¥–µ–ª–∞—Ç—å –¥–∑')
    await message.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ!")

@router.message(F.text.in_(['/clear']))
async def clear_plan(message: Message):
    res = await delete_all_tasks(user_id=message.from_user.id)

    if res is True:
        await message.answer(f"–û—á–∏—â–µ–Ω–æ!", reply_markup=markup.main_menu)
    else:
        await message.answer(f"‚ùóÔ∏è–ü–ª–∞–Ω –∏ —Ç–∞–∫ –ø—É—Å—Ç!", reply_markup=markup.main_menu)

# @router.message(F.text.in_(['üìù–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω', '/edit_plan']))
# async def show_plan(message: Message):
#     tasks = await edit_task(user_id=message.from_user.id)
#     await message.answer(f"–¢–≤–æ–π –ø–ª–∞–Ω: \n {tasks_collection}")

@router.message()
async def error(message: Message):
    await message.answer("–ù–µ–ø–æ–Ω—è—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!", reply_markup=markup.main_menu)